# Generated by Django 5.2.5 on 2025-08-24 11:25

import django.contrib.auth.models
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('school', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Unique identifier')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date modified')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('synced', models.BooleanField(default=False, help_text='Indicates whether this record has been synchronized with the replica system.', verbose_name='Synced')),
                ('username', models.CharField(max_length=150, unique=True, verbose_name='Username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='Last name')),
                ('other_name', models.CharField(blank=True, max_length=150, verbose_name='Other name')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of birth')),
                ('reg_number', models.CharField(blank=True, help_text='Unique school registration number assigned to this user.', max_length=50, unique=True, verbose_name='Registration number')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into the admin site.', verbose_name='Staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active.', verbose_name='Active')),
                ('last_activity', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Last activity')),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='school.branch', verbose_name='Branch')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ('-date_created',),
            },
            managers=[
                ('manager', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdminProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Unique identifier')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date modified')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('synced', models.BooleanField(default=False, help_text='Indicates whether this record has been synchronized with the replica system.', verbose_name='Synced')),
                ('id_number', models.CharField(blank=True, max_length=20, unique=True, verbose_name='ID number')),
                ('phone_number', models.CharField(blank=True, max_length=12, unique=True, verbose_name='Phone number')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='Email address')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='admin_profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Admin Profile',
                'verbose_name_plural': 'Admin Profiles',
                'ordering': ('-date_created',),
            },
        ),
        migrations.CreateModel(
            name='ClerkProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Unique identifier')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date modified')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('synced', models.BooleanField(default=False, help_text='Indicates whether this record has been synchronized with the replica system.', verbose_name='Synced')),
                ('id_number', models.CharField(max_length=20, unique=True, verbose_name='ID number')),
                ('phone_number', models.CharField(blank=True, max_length=12, unique=True, verbose_name='Phone number')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='Email address')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='clerk_profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Clerk Profile',
                'verbose_name_plural': 'Clerk Profiles',
                'ordering': ('-date_created',),
            },
        ),
        migrations.CreateModel(
            name='GuardianProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Unique identifier')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date modified')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('synced', models.BooleanField(default=False, help_text='Indicates whether this record has been synchronized with the replica system.', verbose_name='Synced')),
                ('id_number', models.CharField(max_length=20, unique=True, verbose_name='ID number')),
                ('phone_number', models.CharField(max_length=20, unique=True, verbose_name='Phone number')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='Email address')),
                ('occupation', models.CharField(blank=True, max_length=100, verbose_name='Occupation')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='guardian_profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Guardian Profile',
                'verbose_name_plural': 'Guardian Profiles',
                'ordering': ('-date_created',),
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Unique identifier')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date modified')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('synced', models.BooleanField(default=False, help_text='Indicates whether this record has been synchronized with the replica system.', verbose_name='Synced')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=100, verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
            ],
            options={
                'verbose_name': 'Permission',
                'verbose_name_plural': 'Permissions',
                'ordering': ('name', '-date_created'),
                'indexes': [models.Index(fields=['name', 'is_active'], name='users_permi_name_7e8fb7_idx')],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Unique identifier')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date modified')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('synced', models.BooleanField(default=False, help_text='Indicates whether this record has been synchronized with the replica system.', verbose_name='Synced')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=100, verbose_name='Description')),
                ('can_login', models.BooleanField(default=False, verbose_name='Can login')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'ordering': ('name', '-date_created'),
                'indexes': [models.Index(fields=['name', 'is_active'], name='users_role_name_cd4d31_idx')],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.role', verbose_name='Role'),
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Unique identifier')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date modified')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('synced', models.BooleanField(default=False, help_text='Indicates whether this record has been synchronized with the replica system.', verbose_name='Synced')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('permission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.permission', verbose_name='Permission')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.role', verbose_name='Role')),
            ],
            options={
                'verbose_name': 'Role Permission',
                'verbose_name_plural': 'Role Permissions',
                'ordering': ('-date_created',),
            },
        ),
        migrations.CreateModel(
            name='StudentGuardian',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Unique identifier')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date modified')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('synced', models.BooleanField(default=False, help_text='Indicates whether this record has been synchronized with the replica system.', verbose_name='Synced')),
                ('relationship', models.CharField(blank=True, choices=[('father', 'Father'), ('mother', 'Mother'), ('guardian', 'Guardian'), ('uncle', 'Uncle'), ('aunt', 'Aunt'), ('brother', 'Brother'), ('sister', 'Sister'), ('grandfather', 'Grandfather'), ('grandmother', 'Grandmother'), ('other', 'Other')], default='other', help_text="The guardian's relationship to the student.", max_length=20, verbose_name='Relationship')),
                ('is_primary', models.BooleanField(default=False, help_text="Indicates whether this is the student's primary guardian.", verbose_name='Primary guardian')),
                ('guardian', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='guardian_students', to=settings.AUTH_USER_MODEL, verbose_name='Guardian')),
            ],
            options={
                'verbose_name': 'Student guardian',
                'verbose_name_plural': 'Student guardians',
                'ordering': ('-date_created',),
            },
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Unique identifier')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date modified')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('synced', models.BooleanField(default=False, help_text='Indicates whether this record has been synchronized with the replica system.', verbose_name='Synced')),
                ('knec_number', models.CharField(blank=True, max_length=50, unique=True, verbose_name='KNEC number')),
                ('nemis_number', models.CharField(blank=True, max_length=50, unique=True, verbose_name='NEMIS number')),
                ('medical_info', models.TextField(blank=True, null=True, verbose_name='Medical information')),
                ('additional_info', models.TextField(blank=True, null=True, verbose_name='Additional information')),
                ('classroom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students', to='school.classroom', verbose_name='Classroom')),
                ('guardians', models.ManyToManyField(related_name='guarded_students', through='users.StudentGuardian', to=settings.AUTH_USER_MODEL, verbose_name='Guardians')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Student Profile',
                'verbose_name_plural': 'Student Profiles',
                'ordering': ('-date_created',),
            },
        ),
        migrations.AddField(
            model_name='studentguardian',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_guardians', to='users.studentprofile', verbose_name='Student'),
        ),
        migrations.CreateModel(
            name='TeacherProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Unique identifier')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date modified')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('synced', models.BooleanField(default=False, help_text='Indicates whether this record has been synchronized with the replica system.', verbose_name='Synced')),
                ('tsc_number', models.CharField(max_length=50, unique=True, verbose_name='TSC number')),
                ('id_number', models.CharField(max_length=20, unique=True, verbose_name='ID number')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Phone number')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='Email address')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Teacher Profile',
                'verbose_name_plural': 'Teacher Profiles',
                'ordering': ('-date_created',),
            },
        ),
        migrations.CreateModel(
            name='ExtendedPermission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Unique identifier')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date modified')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('synced', models.BooleanField(default=False, help_text='Indicates whether this record has been synchronized with the replica system.', verbose_name='Synced')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('permission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.permission', verbose_name='Permission')),
            ],
            options={
                'verbose_name': 'Extended Permission',
                'verbose_name_plural': 'Extended Permissions',
                'ordering': ('-date_created',),
                'indexes': [models.Index(fields=['user', 'permission', 'is_active'], name='users_exten_user_id_d9b8b3_idx')],
                'unique_together': {('user', 'permission')},
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username', 'is_active'], name='users_user_usernam_6cca96_idx'),
        ),
        migrations.AddIndex(
            model_name='rolepermission',
            index=models.Index(fields=['role', 'permission', 'is_active'], name='users_rolep_role_id_d81f61_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='rolepermission',
            unique_together={('role', 'permission')},
        ),
        migrations.AlterUniqueTogether(
            name='studentguardian',
            unique_together={('student', 'guardian')},
        ),
    ]
